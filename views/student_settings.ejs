<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurações - MyLib</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/student">
                <i class="fas fa-book"></i> MyLib - Estudante
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    Bem-vindo, <%= user %>!
                </span>
                <a href="/student" class="btn btn-outline-light btn-sm me-2">
                    <i class="fas fa-arrow-left"></i> Voltar ao Dashboard
                </a>
                <button class="btn btn-outline-light btn-sm" id="logoutBtn">
                    <i class="fas fa-sign-out-alt"></i> Sair
                </button>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <main class="px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2"><i class="fas fa-cog"></i> Configurações</h1>
                <p class="text-muted">Gerencie suas informações pessoais e preferências</p>
            </div>

            <div class="row">
                <!-- Informações Pessoais -->
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="fas fa-user"></i> Informações Pessoais</h5>
                        </div>
                        <div class="card-body">
                            <form id="profileForm">
                                <div class="mb-3">
                                    <label for="username" class="form-label">Nome de Usuário</label>
                                    <input type="text" class="form-control" id="username" readonly>
                                    <div class="form-text">O nome de usuário não pode ser alterado</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="fullName" class="form-label">Nome Completo</label>
                                    <input type="text" class="form-control" id="fullName" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="email" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="userType" class="form-label">Tipo de Usuário</label>
                                    <input type="text" class="form-control" id="userType" readonly>
                                </div>
                                
                                <button type="submit" class="btn btn-primary">
                                    <span class="spinner-border spinner-border-sm d-none me-2"></span>
                                    <i class="fas fa-save"></i> Salvar Alterações
                                </button>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Alterar Senha -->
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="fas fa-lock"></i> Alterar Senha</h5>
                        </div>
                        <div class="card-body">
                            <form id="passwordForm">
                                <div class="mb-3">
                                    <label for="currentPassword" class="form-label">Senha Atual</label>
                                    <input type="password" class="form-control" id="currentPassword" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="newPassword" class="form-label">Nova Senha</label>
                                    <input type="password" class="form-control" id="newPassword" required minlength="6">
                                    <div class="form-text">Mínimo de 6 caracteres</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">Confirmar Nova Senha</label>
                                    <input type="password" class="form-control" id="confirmPassword" required>
                                </div>
                                
                                <button type="submit" class="btn btn-warning">
                                    <span class="spinner-border spinner-border-sm d-none me-2"></span>
                                    <i class="fas fa-key"></i> Alterar Senha
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            </main>
    </div>

    <!-- Custom Toast Container -->
    <div id="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/toast.js"></script>
    <script>
        let currentUser = {};

        document.addEventListener('DOMContentLoaded', function() {
            loadUserData();
            setupForms();
        });

        function logout() {
            fetch('/api/auth/exit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    window.location.href = '/login';
                }
            })
            .catch(error => {
                console.error('Erro no logout:', error);
                window.location.href = '/login';
            });
        }

        async function loadUserData() {
            try {
                const response = await fetch('/api/users/me');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const user = await response.json();
                
                console.log('Dados do usuário carregados:', user); // Debug
                
                currentUser = user;
                
                document.getElementById('username').value = user.username || '';
                document.getElementById('fullName').value = user.fullName || '';
                document.getElementById('email').value = user.email || '';
                document.getElementById('userType').value = user.type || 'student';
                
                
                
            } catch (error) {
                console.error('Erro ao carregar dados do usuário:', error);
                showToast('Erro ao carregar dados do usuário', 'error');
            }
        }

        function setupForms() {
            // Form de perfil
            document.getElementById('profileForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                await updateProfile();
            });

            // Form de senha
            document.getElementById('passwordForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                await changePassword();
            });

            // Validação de confirmação de senha
            document.getElementById('confirmPassword').addEventListener('input', (e) => {
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = e.target.value;
                
                if (newPassword !== confirmPassword) {
                    e.target.setCustomValidity('As senhas não coincidem');
                } else {
                    e.target.setCustomValidity('');
                }
            });
        }

        async function updateProfile() {
            const btn = document.querySelector('#profileForm button[type="submit"]');
            const spinner = btn.querySelector('.spinner-border');
            
            btn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const profileData = {
                    fullName: document.getElementById('fullName').value,
                    email: document.getElementById('email').value
                };
                
                const response = await fetch('/api/users/update-profile', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(profileData)
                });
                
                if (response.ok) {
                    showToast('Perfil atualizado com sucesso!', 'success');
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao atualizar perfil', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao atualizar perfil:', error);
                showToast('Erro ao atualizar perfil', 'error');
            } finally {
                btn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        async function changePassword() {
            const btn = document.querySelector('#passwordForm button[type="submit"]');
            const spinner = btn.querySelector('.spinner-border');
            
            btn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const passwordData = {
                    currentPassword: document.getElementById('currentPassword').value,
                    newPassword: document.getElementById('newPassword').value
                };
                
                const response = await fetch('/api/users/change-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(passwordData)
                });
                
                if (response.ok) {
                    showToast('Senha alterada com sucesso!', 'success');
                    document.getElementById('passwordForm').reset();
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao alterar senha', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao alterar senha:', error);
                showToast('Erro ao alterar senha', 'error');
            } finally {
                btn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        // Função de logout
        async function logout() {
            try {
                const response = await fetch("/api/auth/exit", {
                    method: "POST",
                });

                const result = await response.json();

                if (response.ok) {
                    showToast("Logout realizado com sucesso!", "success");
                    setTimeout(() => {
                        window.location.href = "/login";
                    }, 1000);
                } else {
                    showToast("Erro no logout. Tente novamente.", "error");
                }
            } catch (error) {
                console.error("Erro no logout:", error);
                showToast("Erro no logout. Tente novamente.", "error");
            }
        }

        // Adicionar event listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadUserData();
            setupForms();
            
            // Event listener para logout
            document.getElementById('logoutBtn').addEventListener('click', logout);
        });
    </script>
</body>
</html>