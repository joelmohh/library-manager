<%- include('partials/navbar') %>

<body>
    <%- include('partials/admin_sidebar') %>
    
    <div class="dashboard">
        <%- include('partials/admin_header') %>
        
        <div class="container-fluid p-4">
            <!-- Search and Filter Bar -->
            <div class="search-filter-bar">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control" id="searchInput" placeholder="Buscar por descrição ou autor...">
                            <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" id="actionFilter">
                            <option value="">Todas as ações</option>
                            <option value="added">Adicionado</option>
                            <option value="removed">Removido</option>
                            <option value="updated">Atualizado</option>
                            <option value="deleted">Deletado</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <input type="date" class="form-control" id="dateFilter" title="Filtrar por data">
                    </div>
                    
                </div>
            </div>
            
            <!-- Audit Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Registro de Auditoria</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Data/Hora</th>
                                    <th>Ação</th>
                                    <th>Descrição</th>
                                    <th>Autor</th>
                                </tr>
                            </thead>
                            <tbody id="auditTableBody">
                                <tr>
                                    <td colspan="4" class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Carregando...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <nav aria-label="Paginação de auditoria">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be generated by JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container"></div>

    <script>
        let currentPage = 1;
        let currentLimit = 20;
        let currentSearch = '';
        let currentAction = '';
        let currentDate = '';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadAuditLog();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Search functionality
            document.getElementById('searchBtn').addEventListener('click', performSearch);
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') performSearch();
            });
            
            // Filters
            document.getElementById('actionFilter').addEventListener('change', performSearch);
            document.getElementById('dateFilter').addEventListener('change', performSearch);
            
            // Sidebar toggle for mobile
            const sidebarToggle = document.getElementById('sidebarToggle');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    document.querySelector('.sidebar').classList.toggle('show');
                });
            }
        }

        async function loadAuditLog(page = 1) {
            try {
                currentPage = page;
                const response = await fetch('/api/actions/');
                let actions = await response.json();
                
                // Apply filters
                if (currentSearch) {
                    actions = actions.filter(action => 
                        action.description.toLowerCase().includes(currentSearch.toLowerCase()) ||
                        action.author.toLowerCase().includes(currentSearch.toLowerCase())
                    );
                }
                
                if (currentAction) {
                    actions = actions.filter(action => action.action === currentAction);
                }
                
                if (currentDate) {
                    actions = actions.filter(action => {
                        const actionDate = new Date(action.date).toISOString().split('T')[0];
                        return actionDate === currentDate;
                    });
                }
                
                // Pagination
                const startIndex = (currentPage - 1) * currentLimit;
                const endIndex = startIndex + currentLimit;
                const paginatedActions = actions.slice(startIndex, endIndex);
                
                displayAuditLog(paginatedActions);
                updatePagination(actions.length, currentPage, Math.ceil(actions.length / currentLimit));
                
            } catch (error) {
                console.error('Erro ao carregar log de auditoria:', error);
                showToast('Erro ao carregar log de auditoria', 'error');
            }
        }

        function displayAuditLog(actions) {
            const tbody = document.getElementById('auditTableBody');
            
            if (!actions || actions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center">Nenhuma ação registrada</td></tr>';
                return;
            }
            
            tbody.innerHTML = actions.map(action => {
                // Usar sempre o campo 'date' do modelo Actions
                const dateValue = action.date;
                let formattedDate = 'Data inválida';
                
                if (dateValue) {
                    try {
                        const date = new Date(dateValue);
                        if (!isNaN(date.getTime())) {
                            formattedDate = date.toLocaleString('pt-BR', {
                                year: 'numeric',
                                month: '2-digit',
                                day: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            });
                        }
                    } catch (error) {
                        console.error('Erro ao formatar data:', error);
                    }
                }
                
                const actionBadge = getActionBadge(action.action);
                
                return `
                    <tr>
                        <td>
                            <small>${formattedDate}</small>
                        </td>
                        <td>${actionBadge}</td>
                        <td>${action.description}</td>
                        <td>
                            <strong>${action.author}</strong>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function getActionBadge(action) {
            const badges = {
                'added': '<span class="badge bg-success"><i class="fas fa-plus me-1"></i>Adicionado</span>',
                'removed': '<span class="badge bg-danger"><i class="fas fa-trash me-1"></i>Removido</span>',
                'updated': '<span class="badge bg-warning"><i class="fas fa-edit me-1"></i>Atualizado</span>',
                'edited': '<span class="badge bg-warning"><i class="fas fa-edit me-1"></i>Editado</span>'
            };
            return badges[action] || `<span class="badge bg-secondary">${action}</span>`;
        }

        function updatePagination(total, page, lastPage) {
            const pagination = document.getElementById('pagination');
            if (!total || total <= currentLimit) {
                pagination.innerHTML = '';
                return;
            }
            
            let paginationHTML = '';
            
            // Previous button
            if (page > 1) {
                paginationHTML += `<li class="page-item"><a class="page-link pagination-link" href="#" data-page="${page - 1}">Anterior</a></li>`;
            }
            
            // Page numbers
            for (let i = Math.max(1, page - 2); i <= Math.min(lastPage, page + 2); i++) {
                paginationHTML += `<li class="page-item ${i === page ? 'active' : ''}">
                    <a class="page-link pagination-link" href="#" data-page="${i}">${i}</a>
                </li>`;
            }
            
            // Next button
            if (page < lastPage) {
                paginationHTML += `<li class="page-item"><a class="page-link pagination-link" href="#" data-page="${page + 1}">Próximo</a></li>`;
            }
            
            pagination.innerHTML = paginationHTML;
        }

        function performSearch() {
            currentSearch = document.getElementById('searchInput').value.trim();
            currentAction = document.getElementById('actionFilter').value;
            currentDate = document.getElementById('dateFilter').value;
            currentPage = 1;
            loadAuditLog();
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('actionFilter').value = '';
            document.getElementById('dateFilter').value = '';
            currentSearch = '';
            currentAction = '';
            currentDate = '';
            currentPage = 1;
            loadAuditLog(1); // Recarrega os dados sem filtros
        }

        function showToast(message, type = 'info') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const toastHTML = `
                <div class="toast ${type}" role="alert" id="${toastId}">
                    <div class="toast-header">
                        <strong class="me-auto">${type === 'success' ? 'Sucesso' : type === 'error' ? 'Erro' : 'Informação'}</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">${message}</div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHTML);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
            toast.show();
            
            toastElement.addEventListener('hidden.bs.toast', function() {
                toastElement.remove();
            });
        }

        // Event Delegation for action buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('#clearFiltersBtn')) {
                clearFilters();
            } else if (e.target.closest('.pagination-link')) {
                e.preventDefault();
                const page = parseInt(e.target.closest('.pagination-link').dataset.page);
                loadAuditLog(page);
            }
        });
    </script>

<%- include('partials/footer') %>
