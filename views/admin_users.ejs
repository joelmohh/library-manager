<%- include('partials/navbar') %>

<body>
    <%- include('partials/admin_sidebar') %>
    <div id="toast-container"></div>
    <div class="dashboard">
        <%- include('partials/admin_header') %>
        
        <div class="container-fluid p-4">
            <!-- Search and Filter Bar -->
            <div class="search-filter-bar">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control search-input" id="searchInput" placeholder="Buscar por nome ou email...">
                            <button class="btn btn-primary search-btn" type="button" id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="typeFilter">
                            <option value="">Todos os tipos</option>
                            <option value="student">Aluno</option>
                            <option value="teacher">Professor</option>
                            <option value="admin">Administrador</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#userModal">
                            <i class="fas fa-plus me-2"></i>Adicionar Usuário
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Users Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Gerenciar Usuários</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    <th>Email</th>
                                    <th>Tipo</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody">
                                <tr>
                                    <td colspan="5" class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Carregando...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <nav aria-label="Paginação de usuários">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be generated by JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- User Modal -->
    <div class="modal fade" id="userModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userModalTitle">Adicionar Usuário</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="userForm">
                    <div class="modal-body">
                        <input type="hidden" id="userId" name="userId">
                        
                        <div class="mb-3">
                            <label for="fullName" class="form-label">Nome Completo</label>
                            <input type="text" class="form-control" id="fullName" name="fullName" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Nome de Usuário</label>
                            <input type="text" class="form-control" id="username" name="username" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="type" class="form-label">Tipo de Usuário</label>
                            <select class="form-select" id="type" name="type" required>
                                <option value="">Selecione...</option>
                                <option value="student">Aluno</option>
                                <option value="teacher">Professor</option>
                                <option value="admin">Administrador</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Senha</label>
                            <input type="password" class="form-control" id="password" name="password">
                            <div class="form-text">Deixe em branco para manter a senha atual (apenas para edição)</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary" id="saveUserBtn">
                            <span class="spinner-border spinner-border-sm d-none me-2"></span>
                            Salvar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3"></div>

    <!-- Pagination Script -->
    <script src="/js/pagination.js"></script>
    
    <script>
        let usersManager;
        let isEditing = false;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeUsersManager();
            setupEventListeners();
        });

        function initializeUsersManager() {
            usersManager = new AdminPagination({
                apiEndpoint: '/api/users',
                tableBodyId: 'usersTableBody',
                paginationId: 'pagination',
                searchInputId: 'searchInput',
                searchBtnId: 'searchBtn',
                filterIds: ['typeFilter'],
                emptyMessage: 'Nenhum usuário encontrado',
                renderRow: renderUserRow,
                onLoadError: (error) => {
                    console.error('Erro ao carregar usuários:', error);
                    showToast('Erro ao carregar usuários', 'error');
                }
            });
        }

        function renderUserRow(user) {
            return `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="avatar me-3">
                                <i class="fas fa-user-circle fa-2x text-muted"></i>
                            </div>
                            <div>
                                <strong>${user.fullName}</strong>
                                <div class="text-muted small">@${user.username}</div>
                            </div>
                        </div>
                    </td>
                    <td>${user.email}</td>
                    <td>${getUserTypeBadge(user.type)}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action btn-edit-user" data-user-id="${user._id}" title="Editar">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action btn-delete-user" data-user-id="${user._id}" title="Remover">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
        }

        function getUserTypeBadge(type) {
            const badges = {
                admin: '<span class="badge bg-danger">Administrador</span>',
                teacher: '<span class="badge bg-info">Professor</span>',
                student: '<span class="badge bg-primary">Aluno</span>'
            };
            return badges[type] || '<span class="badge bg-secondary">Desconhecido</span>';
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('pt-BR');
        }

        function setupEventListeners() {
            // Form submission
            document.getElementById('userForm').addEventListener('submit', handleFormSubmit);
            
            // Modal events
            document.getElementById('userModal').addEventListener('hidden.bs.modal', resetForm);
            
            // Sidebar toggle for mobile
            const sidebarToggle = document.getElementById('sidebarToggle');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    document.querySelector('.sidebar').classList.toggle('show');
                });
            }
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const saveBtn = document.getElementById('saveUserBtn');
            const spinner = saveBtn.querySelector('.spinner-border');
            
            saveBtn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const formData = new FormData(e.target);
                const userData = Object.fromEntries(formData.entries());
                
                // Remove password if empty
                if (!userData.password) {
                    delete userData.password;
                }
                
                const url = isEditing ? `/api/users/update/${userData.userId}` : '/api/users/add';
                const method = 'POST';
                
                if (isEditing) {
                    delete userData.userId;
                }
                
                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(userData)
                });
                
                if (response.ok) {
                    showToast(isEditing ? 'Usuário atualizado com sucesso!' : 'Usuário adicionado com sucesso!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
                    usersManager.refresh();
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao salvar usuário', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao salvar usuário:', error);
                showToast('Erro ao salvar usuário', 'error');
            } finally {
                saveBtn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        async function editUser(userId) {
            try {
                const response = await fetch(`/api/users/${userId}`);
                const user = await response.json();
                
                document.getElementById('userId').value = user._id;
                document.getElementById('fullName').value = user.fullName;
                document.getElementById('username').value = user.username;
                document.getElementById('email').value = user.email;
                document.getElementById('type').value = user.type;
                document.getElementById('password').value = '';
                
                document.getElementById('userModalTitle').textContent = 'Editar Usuário';
                isEditing = true;
                
                new bootstrap.Modal(document.getElementById('userModal')).show();
                
            } catch (error) {
                console.error('Erro ao carregar usuário:', error);
                showToast('Erro ao carregar dados do usuário', 'error');
            }
        }

        async function deleteUser(userId) {
            if (!confirm('Tem certeza que deseja remover este usuário? Esta ação não pode ser desfeita.')) return;
            
            try {
                const response = await fetch(`/api/users/remove/${userId}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showToast('Usuário removido com sucesso!', 'success');
                    usersManager.refresh();
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao remover usuário', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao remover usuário:', error);
                showToast('Erro ao remover usuário', 'error');
            }
        }

        function resetForm() {
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            document.getElementById('userModalTitle').textContent = 'Adicionar Usuário';
            isEditing = false;
        }

        // Event Delegation for action buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.btn-edit-user')) {
                const userId = e.target.closest('.btn-edit-user').dataset.userId;
                editUser(userId);
            } else if (e.target.closest('.btn-delete-user')) {
                const userId = e.target.closest('.btn-delete-user').dataset.userId;
                deleteUser(userId);
            }
        });
    </script>

<%- include('partials/footer') %>