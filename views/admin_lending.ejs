<%- include('partials/navbar') %>

<body>
    <%- include('partials/admin_sidebar') %>
    
    <div class="dashboard">
        <%- include('partials/admin_header') %>
        <div id="toast-container"></div>
        <div class="container-fluid p-4">
            <!-- Search and Filter Bar -->
            <div class="search-filter-bar">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control search-input" id="searchInput" placeholder="Buscar por usuário ou livro...">
                            <button class="btn btn-primary search-btn" type="button" id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="statusFilter">
                            <option value="">Todos os status</option>
                            <option value="active">Ativo</option>
                            <option value="returned">Devolvido</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#lendingModal">
                            <i class="fas fa-plus me-2"></i>Novo Empréstimo
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Lending Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Gerenciar Empréstimos</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Usuário</th>
                                    <th>Livro</th>
                                    <th>Data de Empréstimo</th>
                                    <th>Data de Devolução</th>
                                    <th>Status</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="lendingsTableBody">
                                <tr>
                                    <td colspan="6" class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Carregando...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <nav aria-label="Paginação de empréstimos">
                        <ul class="pagination justify-content-center" id="pagination">
                            <!-- Pagination will be generated by JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Lending Modal -->
    <div class="modal fade" id="lendingModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Novo Empréstimo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="lendingForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="userId" class="form-label">Usuário</label>
                            <select class="form-select" id="userId" name="userId" required>
                                <option value="">Carregando usuários...</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="bookId" class="form-label">Livro</label>
                            <select class="form-select" id="bookId" name="bookId" required>
                                <option value="">Carregando livros...</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="dueDate" class="form-label">Data de Devolução</label>
                            <input type="date" class="form-control" id="dueDate" name="dueDate" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary" id="saveLendingBtn">
                            <span class="spinner-border spinner-border-sm d-none me-2"></span>
                            Criar Empréstimo
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3"></div>

    <!-- Pagination Script -->
    <script src="/js/pagination.js"></script>
    
    <script>
        let lendingsManager;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeLendingsManager();
            setupEventListeners();
            loadModalData();
        });

        function initializeLendingsManager() {
            lendingsManager = new AdminPagination({
                apiEndpoint: '/api/lending',
                tableBodyId: 'lendingsTableBody',
                paginationId: 'pagination',
                searchInputId: 'searchInput',
                searchBtnId: 'searchBtn',
                filterIds: ['statusFilter'],
                emptyMessage: 'Nenhum empréstimo encontrado',
                renderRow: renderLendingRow,
                onLoadError: (error) => {
                    console.error('Erro ao carregar empréstimos:', error);
                    showToast('Erro ao carregar empréstimos', 'error');
                }
            });
        }

        function renderLendingRow(lending) {
            const lendDate = new Date(lending.startDate).toLocaleDateString('pt-BR');
            const dueDate = new Date(lending.endDate).toLocaleDateString('pt-BR');
            const returnDate = lending.returnDate ? new Date(lending.returnDate).toLocaleDateString('pt-BR') : '-';
            
            return `
                <tr>
                    <td>
                        <div>
                            <strong>${lending.user?.fullName || 'Usuário não encontrado'}</strong>
                            <div class="text-muted small">${lending.user?.email || ''}</div>
                        </div>
                    </td>
                    <td>
                        <div>
                            <strong>${lending.book?.title || 'Livro não encontrado'}</strong>
                            <div class="text-muted small">${lending.book?.author || ''}</div>
                        </div>
                    </td>
                    <td>${lendDate}</td>
                    <td>
                        <div>
                            ${dueDate}
                            ${returnDate !== '-' ? `<div class="text-success small">Devolvido: ${returnDate}</div>` : ''}
                        </div>
                    </td>
                    <td>${getLendingStatusBadge(lending.status)}</td>
                    <td>
                        ${lending.status === 'active' ? 
                            `<button class="btn btn-sm btn-outline-success btn-action btn-return-book" data-lending-id="${lending._id}" title="Marcar como devolvido">
                                <i class="fas fa-check"></i> Devolver
                            </button>` : 
                            `<span class="text-muted">Devolvido</span>`
                        }
                    </td>
                </tr>
            `;
        }

        function getLendingStatusBadge(status) {
            const badges = {
                active: '<span class="badge bg-warning">Ativo</span>',
                returned: '<span class="badge bg-success">Devolvido</span>'
            };
            return badges[status] || '<span class="badge bg-secondary">Desconhecido</span>';
        }

        function setupEventListeners() {
            // Form submission
            document.getElementById('lendingForm').addEventListener('submit', handleFormSubmit);
            
            // Modal events
            document.getElementById('lendingModal').addEventListener('show.bs.modal', loadModalData);
            document.getElementById('lendingModal').addEventListener('hidden.bs.modal', resetForm);
            
            // Set default due date (7 days from now)
            const dueDateInput = document.getElementById('dueDate');
            const defaultDueDate = new Date();
            defaultDueDate.setDate(defaultDueDate.getDate() + 7);
            dueDateInput.value = defaultDueDate.toISOString().split('T')[0];
            
            // Sidebar toggle for mobile
            const sidebarToggle = document.getElementById('sidebarToggle');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    document.querySelector('.sidebar').classList.toggle('show');
                });
            }
        }

        async function loadModalData() {
            await Promise.all([loadUsers(), loadBooks()]);
        }

        async function loadUsers() {
            try {
                const response = await fetch('/api/users');
                const data = await response.json();
                const users = data.users || data;
                
                const userSelect = document.getElementById('userId');
                userSelect.innerHTML = '<option value="">Selecione um usuário...</option>';
                
                users.filter(user => user.type !== 'admin').forEach(user => {
                    userSelect.innerHTML += `<option value="${user._id}">${user.fullName} (${user.email})</option>`;
                });
            } catch (error) {
                console.error('Erro ao carregar usuários:', error);
            }
        }

        async function loadBooks() {
            try {
                const response = await fetch('/api/books');
                const data = await response.json();
                const books = data.books || data;
                
                const bookSelect = document.getElementById('bookId');
                bookSelect.innerHTML = '<option value="">Selecione um livro...</option>';
                
                books.filter(book => book.available).forEach(book => {
                    bookSelect.innerHTML += `<option value="${book._id}">${book.title} - ${book.author}</option>`;
                });
            } catch (error) {
                console.error('Erro ao carregar livros:', error);
            }
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const saveBtn = document.getElementById('saveLendingBtn');
            const spinner = saveBtn.querySelector('.spinner-border');
            
            saveBtn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const formData = new FormData(e.target);
                const rawData = Object.fromEntries(formData.entries());
                
                // Mapear os campos do formulário para o formato esperado pela API
                const lendingData = {
                    user: rawData.userId,
                    book: rawData.bookId,
                    startDate: new Date().toISOString(), // Data atual como data de início
                    endDate: new Date(rawData.dueDate).toISOString() // Data de devolução
                };
                
                // Validar se todos os campos obrigatórios foram preenchidos
                if (!lendingData.user || !lendingData.book || !lendingData.endDate) {
                    showToast('Preencha todos os campos obrigatórios', 'warning');
                    return;
                }
                
                const response = await fetch('/api/lending/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(lendingData)
                });
                
                if (response.ok) {
                    showToast('Empréstimo criado com sucesso!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('lendingModal')).hide();
                    lendingsManager.refresh();
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao criar empréstimo', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao criar empréstimo:', error);
                showToast('Erro ao criar empréstimo', 'error');
            } finally {
                saveBtn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        async function returnBook(lendingId) {
            if (!confirm('Confirma a devolução deste livro?')) return;
            
            try {
                const response = await fetch(`/api/lending/return/${lendingId}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showToast('Livro devolvido com sucesso!', 'success');
                    lendingsManager.refresh();
                } else {
                    const error = await response.json();
                    showToast(error.message || 'Erro ao devolver livro', 'error');
                }
                
            } catch (error) {
                console.error('Erro ao devolver livro:', error);
                showToast('Erro ao devolver livro', 'error');
            }
        }

        function resetForm() {
            document.getElementById('lendingForm').reset();
            // Reset default due date
            const dueDateInput = document.getElementById('dueDate');
            const defaultDueDate = new Date();
            defaultDueDate.setDate(defaultDueDate.getDate() + 7);
            dueDateInput.value = defaultDueDate.toISOString().split('T')[0];
        }

        // Event Delegation for action buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.btn-return-book')) {
                const lendingId = e.target.closest('.btn-return-book').dataset.lendingId;
                returnBook(lendingId);
            }
        });
    </script>

<%- include('partials/footer') %>